@using Microsoft.AspNetCore.Mvc.Rendering;
@typeparam TItem

@if (typeof(TItem).IsEnum)
{
  <MudSelect Label="@Label" @bind-Value="Value" ToStringFunc="x => x.ToString()" @bind-Value:after="ValueUpdated" Margin="Margin.Dense">
    @foreach (TItem item in Enum.GetValues(typeof(TItem)))
    {
      <MudSelectItem Value="@item">@Enum.GetName(typeof(TItem), item)</MudSelectItem>
    }
  </MudSelect>
}
else
{
  <MudSelect Label="@Label" @bind-Value="Value" @bind-Value:after="ValueUpdated" Margin="Margin.Dense">
    @foreach (var item in Options)
    {
      <MudSelectItem Value="@item.Value">@item.Text</MudSelectItem>
    }
  </MudSelect>
}


@code {
  [Parameter]
  public TItem Value { get; set; }

  [Parameter]
  public EventCallback<TItem> ValueChanged { get; set; }

  [Parameter]
  public List<SelectListItem> Options { get; set; } = new List<SelectListItem>();

  [Parameter]
  public string Label { get; set; } = "";

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
  }

  private async Task ValueUpdated()
  {
    await ValueChanged.InvokeAsync(Value);
  }
}
