@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using PNMT.WebApp.Helper;
@typeparam TItem

@if (Editing)
{
  <MudGrid>
    <MudItem xs="10">
      @if (InputType == "checkbox")
      {
        <MudCheckBox @bind-Checked="Value"></MudCheckBox>
      }
      @if (InputType == "text")
      {
        <MudTextField @bind-Value="Value" Variant="Variant.Outlined" Margin="Margin.Dense" OnKeyDown="OnKeyDown" Immediate="true"></MudTextField>
      }
      @if (InputType == "select")
      {
        <SelectComponent @bind-Value="Value"></SelectComponent>
      }
    </MudItem>
    <MudItem xs="2">
      <a @onclick:preventDefault=true @onclick=ToggleEdit>
        <MudIcon Icon="@Icons.Material.Filled.SaveAlt" Class="icon icon-base"></MudIcon>
      </a>
    </MudItem>
  </MudGrid>
}
else
{
  @Value
  <a @onclick:preventDefault=true @onclick=ToggleEdit>
    <MudIcon Icon="@Icons.Material.Filled.Edit" Class="icon icon-base icon-editiable-text"></MudIcon>
  </a>
}

@code {
  public bool Editing { get; set; } = false;

  [Parameter]
  public string InputType { get; set; } = "text";

  private string CssClass
  {
    get
    {
      if (InputType == "checkbox") return "form-check-input";
      if (InputType == "select") return "form-select";
      return "form-control";
    }
  }

  List<SelectListItem> Options = new List<SelectListItem>();

  [Parameter]
  public object Entity { get; set; }

  [Parameter]
  public TItem Value { get; set; }

  [Parameter]
  public EventCallback<TItem> ValueChanged { get; set; }

  protected override async Task OnInitializedAsync()
  {
    if (typeof(TItem).IsEnum)
    {
      Enum.GetNames(typeof(TItem)).ToList().ForEach(x =>
      {
        Options.Add(new SelectListItem() { Text = x, Value = x });
      });
    }

    await base.OnInitializedAsync();
  }

  private async void OnKeyDown(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
    {
      ToggleEdit();
    }
  }

  private async void ToggleEdit()
  {
    if (this.Editing)
    {
      await ValueUpdated();
    }

    this.Editing = !this.Editing;
  }

  private async Task ValueUpdated()
  {
    await ValueChanged.InvokeAsync(Value);
    if (Entity != null) Entity.Update();
  }
}
