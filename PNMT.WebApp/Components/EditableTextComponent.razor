@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using PNMT.WebApp.Data;
@typeparam TItem

@if(Editing)
{
    <div class="row g-3 align-items-center">
        <div class="col-auto">
            @if(InputType == "checkbox")
            {
                <input class="@CssClass" @bind="Value" type="@InputType" checked="@Value" />
            }
            @if (InputType == "text")
            {
                <input class="@CssClass" @bind="Value" type="@InputType" @bind:event="oninput" @onkeydown="OnKeyDown" />
            }
            @if (InputType == "select")
            {
                <SelectComponent @bind-Value="Value"></SelectComponent>
            }
        </div>
        <div class="col-auto">
            <a @onclick:preventDefault=true @onclick=ToggleEdit><i class="icon-base bi bi-save-fill"></i></a>
        </div>
    </div>
}
else
{
    @Value
    <span style="width: 10px;"></span>
    <a @onclick:preventDefault=true @onclick=ToggleEdit><i class="icon-base bi bi-pencil-fill"></i></a>
}

@code {
    public bool Editing { get; set; } = false;

    [Parameter]
    public string InputType { get; set; } = "text";

    private string CssClass { get
        {
            if (InputType == "checkbox") return "form-check-input";
            if (InputType == "select") return "form-select";
            return "form-control";
        }
    }

    List<SelectListItem> Options = new List<SelectListItem>();

    [Parameter]
    public object Entity { get; set; }

    [Parameter]
    public TItem Value { get; set; }

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (typeof(TItem).IsEnum)
        {
            Enum.GetNames(typeof(TItem)).ToList().ForEach(x =>
            {
                Options.Add(new SelectListItem() { Text = x, Value = x });
            });
        }

        await base.OnInitializedAsync();
    }

    private async void OnKeyDown(KeyboardEventArgs args)
    {
        if(args.Key == "Enter")
        {
            ToggleEdit();
        }
    }

    private async void ToggleEdit()
    {
        if(this.Editing)
        {
            await ValueUpdated();
        }

        this.Editing = !this.Editing;
    }

    private async Task ValueUpdated()
    {
        await ValueChanged.InvokeAsync(Value);
        if (Entity != null) Entity.Update();
    }
}
