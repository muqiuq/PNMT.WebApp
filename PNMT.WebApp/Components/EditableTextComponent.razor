@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using PNMT.WebApp.Helper;
@typeparam TItem

@if (Editing)
{
    <div class="d-flex flex-grow-1 gap-4">
        <div style="width: 80%">
            @if (InputType == "checkbox")
            {
                <MudCheckBox @bind-Checked="Value"></MudCheckBox>
            }
            @if (InputType == "text")
            {
                <MudTextField @bind-Value="Value" Variant="Variant.Outlined" Margin="Margin.Dense" OnKeyDown="OnKeyDown" Immediate="true"></MudTextField>
            }
            @if (InputType == "select")
            {
                <SelectComponent @bind-Value="Value"></SelectComponent>
            }
            @if (InputType == "selectT")
            {
                <SelectComponent @bind-Value="Value" Options="@Options"></SelectComponent>
            }
        </div>
        <div class="d-flex align-center justify-center">
            <a @onclick:preventDefault=true @onclick=ToggleEdit>
                <MudIcon Icon="@Icons.Material.Filled.SaveAlt" Class="icon icon-base"></MudIcon>
            </a>
        </div>
    </div>
}
else
{
    @Value
    <a @onclick:preventDefault=true @onclick=ToggleEdit>
        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="icon icon-base icon-editiable-text"></MudIcon>
    </a>
}

@code {
    public bool Editing { get; set; } = false;

    [Parameter]
    public string InputType { get; set; } = "text";

    private string CssClass
    {
        get
        {
            if (InputType == "checkbox") return "form-check-input";
            if (InputType == "select") return "form-select";
            return "form-control";
        }
    }

    List<SelectListItem> Options = new List<SelectListItem>();

    [Parameter]
    public object Entity { get; set; }

    [Parameter]
    public TItem Value { get; set; }

    [Parameter]
    public List<object>? PossibleValues { get; set; }

    [Parameter] 
    public string ShowTextKey { get; set; } = "Name";

    [Parameter]
    public bool AllowNull { get; set; } = false;

    [Parameter]
    public EventCallback<TItem> ValueChanged { get; set; }


    [Parameter]
    public EventCallback<List<TItem>> PossibleValuesChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (typeof(TItem).IsEnum)
        {
            Enum.GetNames(typeof(TItem)).ToList().ForEach(x =>
            {
                Options.Add(new SelectListItem() { Text = x, Value = x });
            });
        }

        await base.OnInitializedAsync();
    }

    private async void OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            ToggleEdit();
        }
    }

    private async void ToggleEdit()
    {
        if (this.Editing)
        {
            await ValueUpdated();
        }
        else
        {
            await PossibleValuesUpdated();
        }

        this.Editing = !this.Editing;
    }

    private async Task PossibleValuesUpdated()
    {
        if (PossibleValues != null)
        {
            Options.Clear();
            foreach (var pv in PossibleValues)
            {
                var nameProp = pv.GetType().GetProperties().Single(p => p.Name == "Name");
                var idProp = pv.GetType().GetProperties().Single(p => p.Name == "Id");
                Options.Add(new SelectListItem() { Text = nameProp.GetValue(pv)?.ToString(), Value = idProp.GetValue(pv)?.ToString() });
            }
            if (AllowNull)
            {
                Options.Add(new SelectListItem() { Text = "-", Value = null });
            }
        }
    }

    private async Task ValueUpdated()
    {
        await ValueChanged.InvokeAsync(Value);
        if (Entity != null) Entity.Update();
    }
}
