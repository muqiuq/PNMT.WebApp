@page "/dnszones"
@attribute [Authorize]
@using PNMT.ApiClient.Data;
@using PNMT.WebApp.Models.Forms;
@using PNMTD.Lib.Helper;
@using PNMTD.Lib.Models.Poco;
@inject NavigationManager navigationManager
@inject PNMTDApi _PNTMDApi

<MudOverlay Visible="isLoading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-3 mb-1 mt-4">
                <div class="d-flex">
                    <div class="d-flex align-center d-inline"><h1><MudIcon Icon="@Icons.Material.Filled.Dns" Class="icon-base-more-space"></MudIcon></h1></div>
                    <div class="d-flex align-center d-inline">
                        <h1>
                            DNS monitoring
                        </h1>
                    </div>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <div class="pa-3 mb-1 mb-2">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Href="/dnszone/new">Create new</MudButton>
    </div>
    <MudDataGrid Items="@DnsZones" T="DnsZonePoco" Dense="true" Bordered="true" Filterable="true" RowsPerPage="20" ColumnResizeMode="ResizeMode.Column">
        <Columns>
            <TemplateColumn Title="#" Filterable="false" SortBy="@(x => x.Enabled)">
                <CellTemplate>
                    @if (context.Item.Enabled)
                    {
                        @if (context.Item.RecordsMatch)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.CheckBox" Color="Color.Success"></MudIcon>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error"></MudIcon>
                        }
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.AlarmOff"></MudIcon>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Name" SortBy="@(x => x.ZoneName)">
                <CellTemplate>
                    <a href="/dnszone/@context.Item.Id">@context.Item.ZoneName</a>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="h => h.LastChecked" Title="Last checked" />
            <PropertyColumn Property="h => h.ZoneEntries.Count" Title="N° records" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="DnsZonePoco" />
        </PagerContent>
    </MudDataGrid>
    <BigCardComp Title="History">
        @if (logEntries != null)
        {
            <div class="pb-2"><MudPagination Color="Color.Primary" Count="@(logEntries.Count / 10)" @bind-Selected="@_selected_log_page" /></div>
            @foreach (var logEntry in logEntries.Skip(10 * _selected_log_page).Take(10))
            {
                <div class="pt-1">
                    <p><a href="/dnszone/@logEntry.DnsZoneId"><b>[@logEntry.Created]</b></a> @logEntry.Message</p>
                </div>
            }
        }
    </BigCardComp>
</MudContainer>

@code {
    bool isLoading = true;

    List<DnsZonePoco> DnsZones = new List<DnsZonePoco>();

    public List<DnsZoneLogEntryPoco> logEntries;

    private int _selected_log_page = 1;

    protected override async Task OnInitializedAsync()
    {
        DnsZones = (await _PNTMDApi.DnsZones.GetAll());

        logEntries = (await _PNTMDApi.DnsZones.GetLogs());

        isLoading = false;
    }
}
