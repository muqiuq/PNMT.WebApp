@page "/sensor/new/{Id:guid}"
@attribute [Authorize]
@inject ILogger<NewSensorComponent> Logger
@using PNMT.ApiClient.Data;
@using PNMT.WebApp.Components
@using PNMT.WebApp.Models.Forms;
@using PNMT.WebApp.Pages.Hosts;
@using PNMTD.Lib.Helper;
@using PNMTD.Lib.Models.Enum
@using PNMTD.Lib.Models.Poco;
@using PNMTD.Models.Poco;
@inject NavigationManager navigationManager
@inject PNMTDApi _PNTMDApi

<MudOverlay Visible="isLoading" DarkBackground="true" Absolute="true">
  <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@if (sensorForm != null)
{
    <MudContainer>
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="pa-3 ma-2 mt-4">
                    <h1>New Sensor for @hostPoco?.Name</h1>
                </MudPaper>
            </MudItem>
        </MudGrid>

        <EditForm EditContext="editContext" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="InvalidSubmit">
            <DataAnnotationsValidator />
            @if (!ValidForm)
            {
                <MudAlert Severity="Severity.Error" Dense="true" Class="my-2"><ValidationSummary/></MudAlert>
            }
            <MudStack>
                <MudCheckBox @bind-Checked="@sensorForm.Enabled" Label="Enabled"></MudCheckBox>
                <MudTextField @bind-Value="sensorForm.Name" Label="Name" Variant="Variant.Outlined"></MudTextField>
                <MudTextField @bind-Value="sensorForm.TextId" Label="TextId" Variant="Variant.Outlined"></MudTextField>
                <SelectComponent Label="Type" @bind-Value="sensorForm.Type" @bind-Value:after="SensorTypeChanged"></SelectComponent>
                <MudNumericField @bind-Value="sensorForm.Interval" Label="Internval (s)" Variant="Variant.Outlined"></MudNumericField>
                <MudNumericField @bind-Value="sensorForm.GracePeriod" Label="GracePeriod (s)" Variant="Variant.Outlined"></MudNumericField>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">@("Create")</MudButton>
            </MudStack>
        </EditForm>
    </MudContainer>
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    private HostPoco hostPoco;

    public SensorPoco sensorPoco;

    private bool isLoading = true;

    public SensorForm sensorForm;

    public string Title = "New Sensor";

    public bool ValidForm = true;

    protected override async Task OnInitializedAsync()
    {
        sensorForm = new SensorForm()
        {
            Interval = 60,
            GracePeriod = 60
        };

        editContext = new EditContext(sensorForm);

        messageStore = new(editContext);

        hostPoco = (await _PNTMDApi.Hosts.Get(Id));

        await base.OnInitializedAsync();

        isLoading = false;
    }

    private async void HandleValidSubmit()
    {
        ValidForm = true;
    isLoading = true;
    var sensorPoco = sensorForm.MapPropertiesTo<SensorForm, SensorPoco>();
    sensorPoco.ParentId = hostPoco.Id;
    await _PNTMDApi.Sensors.AddNew(sensorPoco);
    navigationManager.NavigateTo($"/host/{hostPoco.Id}");
  }

  private void InvalidSubmit()
  {
    ValidForm = false;
  }

  private void SensorTypeChanged()
  {
      if (!sensorForm.Type.IsEditable())
      {
          ValidForm = false;
          messageStore.Add(() => sensorForm.Type, "Sensor type not editable");
          return;
      }
      else
      {
          messageStore.Clear();
          ValidForm = true;
      }
  }

}
