@page "/notificationrule/new"
@page "/notificationrule/edit/{Id:guid}"
@inject ILogger<EditNotificationRuleComponent> Logger
@using PNMT.ApiClient.Data;
@using PNMT.WebApp.Components;
@using PNMT.WebApp.Models.Forms;
@using PNMTD.Lib.Helper;
@using PNMTD.Lib.Models.Poco;
@inject NavigationManager navigationManager
@inject PNMTDApi _PNTMDApi



<MudContainer>
  <h2>@Title</h2>
  <MudGrid>
    <MudItem xs="6">
      <BigCardComp Title="Properties">
        <EditForm Model="@notificationRuleForm" OnValidSubmit="@HandleValidSubmit">
          <DataAnnotationsValidator />
          <ValidationSummary />
          <MudStack>
            <MudCheckBox @bind-Checked="@notificationRuleForm.Enabled" Label="Enabled"></MudCheckBox>
            <MudTextField @bind-Value="notificationRuleForm.Name" Label="Name" Variant="Variant.Outlined"></MudTextField>
            <MudTextField @bind-Value="notificationRuleForm.Recipient" Label="Recipient" Variant="Variant.Outlined"></MudTextField>
            <SelectComponent Label="Type" @bind-Value="notificationRuleForm.Type"></SelectComponent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">@(Id == null ? "Add" : "Save")</MudButton>
            </MudStack>
          </EditForm>
        </BigCardComp>
      </MudItem>
      <MudItem xs="6">
        <BigCardComp Title="Linked Sensors">
          @if (notificationRulePoco != null)
        {
          <MudList Clickable="true">
            @foreach (var sensorId in notificationRulePoco.SubscribedSensors)
            {
              <MudListItem><a href="sensor/@sensorId.ToString()">@sensorId.ToString()</a></MudListItem>
              <MudDivider />
            }
          </MudList>
        }
      </BigCardComp>
    </MudItem>
  </MudGrid>
</MudContainer>

@code {

  [Parameter]
  public Guid? Id { get; set; }

  public NotificationRuleForm notificationRuleForm = new NotificationRuleForm();

  private NotificationRulePoco notificationRulePoco;

  public string Title => Id == null ? "Add Notification Rule" : "Edit Notification Rule";

  protected override async Task OnInitializedAsync()
  {
    if (Id.HasValue)
    {
      notificationRulePoco = (await _PNTMDApi.NotificationRules.Get(Id.Value));
      notificationRuleForm = notificationRulePoco.MapPropertiesTo<NotificationRulePoco, NotificationRuleForm>();
    }

    await base.OnInitializedAsync();
  }

  private async void HandleValidSubmit()
  {
    if (Id.HasValue)
    {
      var updatedNotificationRulePoco = notificationRuleForm.MapPropertiesTo<NotificationRuleForm, NotificationRulePoco>();
      updatedNotificationRulePoco.SubscribedSensors = notificationRulePoco.SubscribedSensors;
      await _PNTMDApi.NotificationRules.Update(updatedNotificationRulePoco);
      navigationManager.NavigateTo("/notificationrules");
    }
    else
    {
      var newNotificiationRulePoco = notificationRuleForm.MapPropertiesTo<NotificationRuleForm, NotificationRulePoco>();
      newNotificiationRulePoco.SubscribedSensors = new List<Guid>();
      await _PNTMDApi.NotificationRules.AddNew(newNotificiationRulePoco);
      navigationManager.NavigateTo("/notificationrules");
    }
  }
}
